doctype html
html
    title=`(${Object.keys(cache).length}) Errors`
    head
        meta(charset='utf-8')
        meta(http-equiv='X-UA-Compatible' content='IE=edge')
        meta(name='description' content='Some description')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        meta(name='title' content=`(${Object.keys(cache).length}) Errors`)
        link(rel='icon' sizes='16x16 32x32 48x48 64x64' href='favicon.ico')
        style
            include style.css
        script.
            function deleteError(id){
                var xhr = new XMLHttpRequest();
                xhr.open('DELETE', '/delete/' + id, true);
                xhr.send();
                xhr.onreadystatechange = function() {
                    if (xhr.readyState != 4) return;
                    if (xhr.status != 200) {
                        alert(xhr.status + ': ' + xhr.statusText);
                    } else {
                        location.reload();
                    }
                }
            }

            function toggleView(e, stack) {
                e.isToggled = !(e.isToggled || false);
                let stackElement = e.parentElement.children[1]
                stackElement.classList.toggle("isopen");
                stackElement.children[0].classList.toggle("transparent");

                var clientHeight = stackElement.children[0].clientHeight;
                e.parentElement.style.height = e.isToggled ? "calc(" + clientHeight + "px + 3em + 16px)" : "calc(3em + 4px)";
            }

            function copyStack(e, el, stack) {
                let match = stack.match(/(\w+\/+\w+.lua):(\d+)/);
                if (!match) {
                    return;
                }

                el.classList.add("copy-glow");
                setTimeout(() => {
                    el.classList.remove("copy-glow");
                }, 500)
                navigator.clipboard.writeText(match[0]);
                e.preventDefault();
            }

            let curState = "all";
            function setFilter(e, state) {
                document.getElementById("filter-client").classList.remove("filter-selected")
                document.getElementById("filter-server").classList.remove("filter-selected")
                if (curState == state) {
                    curState = "all";
                    e.isSelected = false;
                } else {
                    e.classList.toggle("filter-selected");
                    curState = state;
                    e.isSelected = true;
                }
                let entries = document.getElementsByClassName("entry");
                for (let i = 0; i < entries.length; i++) {
                    let entry = entries[i];
                    if (!entry.oldDisplay && entry.style.display != "none") {
                        entry.oldDisplay = entry.style.display;
                    }
                    let realm = entry.children[0].classList[1];
                    if (curState == "cl") {
                        entry.style.display = realm == "realmclient" ? entry.oldDisplay : "none";
                        console.log(realm)
                    } else if (curState == "sv") {
                        entry.style.display = realm == "realmserver" ? entry.oldDisplay : "none";
                    } else {
                        entry.style.display = entry.oldDisplay;
                    }
                }
            }
    body
        header
            .headertitle
                div(class="filter")
                    button(id="filter-client" class="filter-btn filter-cl" onclick=`setFilter(this, "cl")`)= "CL"
                    button(id="filter-server" class="filter-btn filter-sv" onclick=`setFilter(this, "sv")`)= "SV"
                h2= "Error Logger"
                small= "By Gonzo"
        main
            div(class="container")
                if Object.keys(cache).length > 0
                    each item in cache
                        div(class="entry")
                            div(class="realmbase realm" + item.realm.replaceAll("'", "") onclick=`toggleView(this, "${item.stack}")`)= "" 
                            .title(onclick=`copyStack(event, this, "${item.name}")`)= item.name
                                .sub.transparent!= item.stack

                            button(class="delete" type='button' onclick='deleteError(' + item.hash + ')')= "âœ–" 
                else
                    div(class="empty")
                        h3="Nothing has been logged yet!"